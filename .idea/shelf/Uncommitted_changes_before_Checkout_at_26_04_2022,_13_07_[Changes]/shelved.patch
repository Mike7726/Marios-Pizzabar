Index: mario/POS.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mario;\n\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class POS {\n //   Scanner in = new Scanner(System.in);\n    Ui ui = new Ui();\n    Controller control = new Controller();\n    Menu theMenu = new Menu();\n    POS.Order newOrder = new POS.Order();\n    POS.FinishedOrders finished = new POS.FinishedOrders();\n\n    public void commands(){\n        switch (ui.userInput()) {\n            case \"m\", \"menu\" -> ui.printMenu();\n            case \"o\", \"order\" -> addToQueue();\n            case \"q\", \"queue\" -> printQueue();\n            case \"e\", \"exit\" -> control.setRunning(false);\n            case \"d\", \"done\" -> endOrder();\n            case \"h\", \"help\" -> ui.commandHelp();\n            case \"f\", \"finished\" -> printFinishedOrders();\n            default -> System.out.println(\"Sorry, Command not known. Try again: \");\n        }\n        commands();\n    }\n\n\n    public void addToQueue() {\n        boolean endOrder = false;\n        System.out.println(\"Enter pizza ID: \");\n        while (!endOrder) {\n            String add = ui.userInput();\n            if (add.equals(\"e\")) {\n                newOrder.currentOrder(newOrder.orders);\n                newOrder.printCurrentOrderPrice();\n                newOrder.current.clear();\n                endOrder = true;\n            } else if (theMenu.menu.get(add) == null)\n                System.out.println(\"Sorry, no such pizza exist\");\n            else {\n                newOrder.addPizzaToOrder(theMenu.menu.get(add));\n                printQueue();\n            }\n        }\n    }\n\n    public void printQueue() {\n        System.out.println(\"Order queue: \");\n        for (int i = 0; i < newOrder.orders.size(); i++)\n            System.out.println(newOrder.orders.get(i));\n    }\n\n    public void printFinishedOrders() {\n        int totalPrice = 0;\n        System.out.println(\"Finished orders: \");\n        for (int i = 0; i < finished.list.size(); i++) {\n            System.out.println(finished.list.get(i));\n        }\n        for (int i = 0; i < finished.list.size(); i++) {\n            totalPrice += finished.list.get(i).getPrice();\n        }\n        System.out.println(\"Total income: \" + totalPrice + \"\\n\");\n    }\n\n    public void endOrder() {\n        if (newOrder.orders.size() != 0) {\n            finished.addPizza(newOrder.orders.get(0));\n            newOrder.orders.remove(0);\n            printFinishedOrders();\n        } else System.out.println(\"No pizza in queue\");\n    }\n\n    public void endOfDayDetails() {\n    }\n\n    ////////////////////////////////////////\n    public static class Order {\n        ArrayList<Pizza> orders = new ArrayList<>();\n        ArrayList<ArrayList<Pizza>> current = new ArrayList<>();\n\n        public void addPizzaToOrder(Pizza pizza) {\n            orders.add(pizza);\n        }\n\n        public void currentOrder(ArrayList<Pizza> a) {\n            current.add(orders);\n            String endOfOrder = current.toString().replace(\"[\", \"\")\n                    .replace(\"]\", \"\").replace(\",\", \"\\n\").trim();\n            System.out.println(endOfOrder);\n        }\n\n        public void printCurrentOrderPrice() {\n            int total = 0;\n            for (int i = 0; i < orders.size(); i++)\n                total += orders.get(i).getPrice();\n            System.out.println(\"Total Price: \" + total);\n        }\n    }\n\n    //////////////////////////////////////////////////////\n    public static class FinishedOrders {\n        ArrayList<Pizza> list = new ArrayList<>();\n\n        public void addPizza(Pizza pizza) {\n            list.add(pizza);\n        }\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/mario/POS.java b/mario/POS.java
--- a/mario/POS.java	
+++ b/mario/POS.java	
@@ -34,6 +34,7 @@
             if (add.equals("e")) {
                 newOrder.currentOrder(newOrder.orders);
                 newOrder.printCurrentOrderPrice();
+                //newOrder.orders.clear();
                 newOrder.current.clear();
                 endOrder = true;
             } else if (theMenu.menu.get(add) == null)
